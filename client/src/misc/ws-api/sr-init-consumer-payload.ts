// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { MediaKind } from '../ws-api/media-kind.js';
import { MediaType } from '../ws-api/media-type.js';


export class SrInitConsumerPayload {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SrInitConsumerPayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSrInitConsumerPayload(bb:flatbuffers.ByteBuffer, obj?:SrInitConsumerPayload):SrInitConsumerPayload {
  return (obj || new SrInitConsumerPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSrInitConsumerPayload(bb:flatbuffers.ByteBuffer, obj?:SrInitConsumerPayload):SrInitConsumerPayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SrInitConsumerPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

kind():MediaKind {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : MediaKind.AUDIO;
}

producerId():string|null
producerId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
producerId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

transportId():string|null
transportId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
transportId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

rtpParameters():string|null
rtpParameters(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rtpParameters(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sessionId():string|null
sessionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sessionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

type():MediaType {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : MediaType.AUDIO;
}

active():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startSrInitConsumerPayload(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addKind(builder:flatbuffers.Builder, kind:MediaKind) {
  builder.addFieldInt8(1, kind, MediaKind.AUDIO);
}

static addProducerId(builder:flatbuffers.Builder, producerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, producerIdOffset, 0);
}

static addTransportId(builder:flatbuffers.Builder, transportIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, transportIdOffset, 0);
}

static addRtpParameters(builder:flatbuffers.Builder, rtpParametersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, rtpParametersOffset, 0);
}

static addSessionId(builder:flatbuffers.Builder, sessionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, sessionIdOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:MediaType) {
  builder.addFieldInt8(6, type, MediaType.AUDIO);
}

static addActive(builder:flatbuffers.Builder, active:boolean) {
  builder.addFieldInt8(7, +active, +false);
}

static endSrInitConsumerPayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSrInitConsumerPayload(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, kind:MediaKind, producerIdOffset:flatbuffers.Offset, transportIdOffset:flatbuffers.Offset, rtpParametersOffset:flatbuffers.Offset, sessionIdOffset:flatbuffers.Offset, type:MediaType, active:boolean):flatbuffers.Offset {
  SrInitConsumerPayload.startSrInitConsumerPayload(builder);
  SrInitConsumerPayload.addId(builder, idOffset);
  SrInitConsumerPayload.addKind(builder, kind);
  SrInitConsumerPayload.addProducerId(builder, producerIdOffset);
  SrInitConsumerPayload.addTransportId(builder, transportIdOffset);
  SrInitConsumerPayload.addRtpParameters(builder, rtpParametersOffset);
  SrInitConsumerPayload.addSessionId(builder, sessionIdOffset);
  SrInitConsumerPayload.addType(builder, type);
  SrInitConsumerPayload.addActive(builder, active);
  return SrInitConsumerPayload.endSrInitConsumerPayload(builder);
}
}
